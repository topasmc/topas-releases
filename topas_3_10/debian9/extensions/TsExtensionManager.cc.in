//
// ********************************************************************
// *                                                                  *
// * Copyright 2022 The TOPAS Collaboration                           *
// *                                                                  *
// * Permission is hereby granted, free of charge, to any person      *
// * obtaining a copy of this software and associated documentation   *
// * files (the "Software"), to deal in the Software without          *
// * restriction, including without limitation the rights to use,     *
// * copy, modify, merge, publish, distribute, sublicense, and/or     *
// * sell copies of the Software, and to permit persons to whom the   *
// * Software is furnished to do so, subject to the following         *
// * conditions:                                                      *
// *                                                                  *
// * The above copyright notice and this permission notice shall be   *
// * included in all copies or substantial portions of the Software.  *
// *                                                                  *
// * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  *
// * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES  *
// * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND         *
// * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT      *
// * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,     *
// * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     *
// * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR    *
// * OTHER DEALINGS IN THE SOFTWARE.                                  *
// *                                                                  *
// ********************************************************************

#include "TsExtensionManager.hh"

#include "TsParameterManager.hh"

#include "TsVGenerator.hh"
#include "TsVScorer.hh"

// Do Not Edit This File !!!
// This file is edited automatically by CMake
// based on what files it finds in the directory
// specified in the CMake option -dTOPAS_EXTENSIONS_DIR
//

TsExtensionManager::TsExtensionManager(TsParameterManager*)
{
	// Insertion point for Component Type Names
}


TsExtensionManager::~TsExtensionManager()
{
}


TsVGeometryComponent* TsExtensionManager::InstantiateComponent(TsParameterManager*, TsMaterialManager*, TsGeometryManager*, TsVGeometryComponent*, G4VPhysicalVolume*, G4String, G4String)
{
	// Insertion point for Components
	return 0;
}


TsVImagingToMaterial* TsExtensionManager::InstantiateImagingToMaterial(TsParameterManager*, TsVGeometryComponent*, std::vector<G4Material*>*, G4String)
{
	// Insertion point for Imaging to Imaging To Material Converter
	return 0;
}


TsVMagneticField* TsExtensionManager::InstantiateMagneticField(TsParameterManager*, TsGeometryManager*, TsVGeometryComponent*, G4String)
{
	// Insertion point for Magnetic Fields
	return 0;
}


TsVElectroMagneticField* TsExtensionManager::InstantiateElectroMagneticField(TsParameterManager*, TsGeometryManager*, TsVGeometryComponent*, G4String)
{
	// Insertion point for ElectroMagnetic Fields
	return 0;
}


TsVFilter* TsExtensionManager::InstantiateFilter(TsParameterManager*, TsMaterialManager*, TsGeometryManager*, TsFilterManager*, TsVGenerator*, TsVScorer*, TsVFilter* parentFilter)
{
	//G4String filtername;

	// Insertion point for Filters
	return parentFilter;
}


TsSource* TsExtensionManager::InstantiateParticleSource(TsParameterManager*, TsSourceManager*, G4String, G4String)
{
	// Insertion point for Particle Sources
	return 0;
}


TsVGenerator* TsExtensionManager::InstantiateParticleGenerator(TsParameterManager*, TsGeometryManager*, TsGeneratorManager*, G4String, G4String)
{
	// Insertion point for Particle Generators
	return 0;
}


TsVScorer* TsExtensionManager::InstantiateScorer(TsParameterManager*, TsMaterialManager*, TsGeometryManager*, TsScoringManager*, G4String, G4String, G4String, G4String, G4bool)
{
	// Insertion point for Scorers
	return 0;
}


TsVOutcomeModel* TsExtensionManager::InstantiateOutcomeModel(TsParameterManager*, G4String, G4String)
{
	// Insertion point for Outcome Models
	return 0;
}


G4VUserPhysicsList* TsExtensionManager::InstantiatePhysicsList(TsParameterManager*, G4String)
{
	// Insertion point for Physics Lists
	return 0;
}


G4VPhysicsConstructor* TsExtensionManager::InstantiatePhysicsModule(TsParameterManager*, G4String)
{
	// Insertion point for Physics Modules
	return 0;
}


void TsExtensionManager::BeginSession(TsParameterManager*) {
	// Insertion point for BeginSession
}


void TsExtensionManager::BeginRun(TsParameterManager*) {
	// Insertion point for BeginRun
}


void TsExtensionManager::BeginHistory(TsParameterManager*, const G4Run*, const G4Event*) {
	// Insertion point for BeginHistory
}


void TsExtensionManager::EndHistory(TsParameterManager*, const G4Run*, const G4Event*) {
	// Insertion point for EndHistory
}


void TsExtensionManager::EndRun(TsParameterManager*) {
	// Insertion point for EndRun
	// Insertion point for SecondEndRun
	// Insertion point for ThirdEndRun
}


void TsExtensionManager::EndSession(TsParameterManager*) {
	// Insertion point for EndSession
}


G4bool TsExtensionManager::HaveFilterNamed(TsParameterManager* pM, TsVGenerator* generator, TsVScorer* scorer, G4String filterName) {
	if (generator)
		return pM->ParameterExists(generator->GetFullParmName(filterName));
	else
		return pM->ParameterExists(scorer->GetFullParmName(filterName));
}
